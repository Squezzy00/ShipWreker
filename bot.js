const { Telegraf, Markup } = require('telegraf');
const { Pool } = require('pg');
const express = require('express');

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

const PORT = process.env.PORT || 10000;
const WEBHOOK_URL = process.env.WEBHOOK_URL || 'https://shipwreker.onrender.com';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
async function initDB() {
  const client = await pool.connect();
  try {
    await client.query(`
      CREATE TABLE IF NOT EXISTS shipwreker_games (
        game_id SERIAL PRIMARY KEY,
        player1_id BIGINT NOT NULL,
        player2_id BIGINT DEFAULT 0,
        player1_field JSONB NOT NULL,
        player2_field JSONB,
        player1_shots JSONB DEFAULT '{}',
        player2_shots JSONB DEFAULT '{}',
        status TEXT DEFAULT 'waiting'
      );
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ shipwreker_games –≥–æ—Ç–æ–≤–∞');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ë–î:', err);
    throw err;
  } finally {
    client.release();
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
function generateBoard() {
  const board = Array(10).fill().map(() => Array(10).fill(0));
  // ... (–≤–∞—à –∫–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—è)
  return board;
}

// –ö–æ–º–∞–Ω–¥–∞ /rules
bot.command('rules', (ctx) => {
  try {
    ctx.replyWithMarkdown(`
      *üìñ –ü—Ä–∞–≤–∏–ª–∞ –ú–æ—Ä—Å–∫–æ–≥–æ –±–æ—è:*
      
      1. –ò–≥—Ä–∞ –≤–µ–¥—ë—Ç—Å—è –Ω–∞ –ø–æ–ª–µ 10√ó10
      2. –ö–æ—Ä–∞–±–ª–∏ —Ä–∞—Å—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      3. –°—Ç—Ä–µ–ª—è–π—Ç–µ –ø–æ –æ—á–µ—Ä–µ–¥–∏, –≤–≤–æ–¥—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, A1)
      4. üí• - –ø–æ–ø–∞–¥–∞–Ω–∏–µ, üåä - –ø—Ä–æ–º–∞—Ö
      5. –ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –ø–µ—Ä–≤—ã–º –ø–æ—Ç–æ–ø–∏—Ç –≤—Å–µ –∫–æ—Ä–∞–±–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞

      *–ö–æ–º–∞–Ω–¥—ã:*
      /playbot - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É —Å –±–æ—Ç–æ–º
      /rules - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    `);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ /rules:', err);
    ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /playbot
bot.command('playbot', async (ctx) => {
  try {
    const playerBoard = generateBoard();
    const botBoard = generateBoard();

    await pool.query(
      `INSERT INTO shipwreker_games 
       (player1_id, player1_field, player2_field, status) 
       VALUES ($1, $2, $3, 'active')`,
      [ctx.from.id, playerBoard, botBoard]
    );

    await ctx.reply('üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í–∞—à–µ –ø–æ–ª–µ:');
    await ctx.reply(renderBoard(playerBoard));
    await ctx.reply('–°—Ç—Ä–µ–ª—è–π—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: "A1"');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ /playbot:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞: ' + err.message);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
bot.action('show_rules', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    await ctx.replyWithMarkdown(`
      *üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:*
      –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /playbot –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...
    `);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ –∫–Ω–æ–ø–∫–µ –ø—Ä–∞–≤–∏–ª:', err);
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.use(bot.webhookCallback('/webhook'));
bot.telegram.setWebhook(`${WEBHOOK_URL}/webhook`);

app.listen(PORT, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  try {
    await initDB();
    console.log('ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err);
  }
});
